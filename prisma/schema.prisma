// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}


// npx prisma generate 
// npx prisma db push


// to clear the db
// run npx prisma migrate reset

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

enum UserRole {
  ADMIN
  USER
}


model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 

 model User {
  id               String    @id @default(cuid())
  email            String    @unique
  emailVerified    DateTime? @map("email_verified")
  name             String
  image            String?
  password         String?
  role             UserRole @default(USER)
  eventsCreated    Event[]          @relation("UserEvents")
  eventsAttending  EventAttendee[] @relation("EventAttendees") 
  accounts         Account[]
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

enum EventCategories {
  LiveMusic @map("Live Music")
  Comedy @map("Comedy")
  Art @map("Art")
  Sports @map("Sports")
  Technology @map("Technology")
  Education @map("Education")
  FoodAndDrink @map("Food and Drink")
  Networking @map("Networking")
  HealthAndWellness @map("Health and Wellness")
  Fashion @map("Fashion")
  MusicFestival @map("Music Festival")
  Conference @map("Conference")
  Workshop @map("Workshop")
  Theater @map("Theater")
  Dance @map("Dance")
  Film @map("Film")
  Literature @map("Literature")
  OutdoorActivities @map("Outdoor Activities")
  Gaming @map("Gaming")
  Charity @map("Charity")
}

model Event {
  id                String          @id @default(cuid())
  title             String
  description       String?
  maxCapacity       Int?
  totalAttendees    Int?  
  category          EventCategories?     
  image             String
  date              DateTime
  userId            String
  user              User             @relation("UserEvents", fields: [userId], references: [id])
  attendees         EventAttendee[]  @relation("EventAttendees")
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
}


// Join table because of many-to-many relationship
// each event has many users
// each user can attend many events

model EventAttendee {
  id      String @id @default(cuid())
  event   Event  @relation("EventAttendees", fields: [eventId], references: [id])
  eventId String
  user    User   @relation("EventAttendees", fields: [userId], references: [id])
  userId  String
}